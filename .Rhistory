"input1" = list(
"ColumnNames" = list("DRIVE", "QTR", "DOWN", "GAME_TIME", "TIME_UNDER", "TIME_SECS", "PLAY_TIME_DIFF", "SIDE_OF_FIELD", "YARD_LINE", "YARD_LINE_100", "YARDS_TO_GO", "YARDS_NET", "GOAL_TO_GO", "FIRST_DOWN", "POS_TEAM", "DEF_TEAM", "YARDS_GAINED", "PLAY_TYPE", "PASSER_ID", "PASS_ATTEMPT", "PASS_LENGTH", "AIR_YARDS", "PASS_LOCATION", "INTERCEPTION_THROWN", "INTERCEPTOR", "RUSHER_ID", "RUSH_ATTEMPT", "RUN_LOCATION", "RUN_GAP", "RECEIVER_ID", "RECEPTION", "BLOCKING_PLAYER", "POS_TEAM_SCORE", "DEF_TEAM_SCORE", "SCORE_DIFF", "ABS_SCORE_DIFF", "HOME_TEAM", "AWAY_TEAM", "SEASON"),
"Values" = list( list( "1", "1", "0", "value", "0", "0", "0", "value", "0", "0", "0", "0", "0", "0", "value", "value", "0", "value", "value", "0", "value", "0", "value", "0", "value", "value", "0", "value", "value", "value", "0", "value", "0", "0", "0", "0", "value", "value", "0" ),  list( "1", "1", "0", "value", "0", "0", "0", "value", "0", "0", "0", "0", "0", "0", "value", "value", "0", "value", "value", "0", "value", "0", "value", "0", "value", "value", "0", "value", "value", "value", "0", "value", "0", "0", "0", "0", "value", "value", "0" )  )
)                ),
GlobalParameters = setNames(fromJSON('{}'), character(0))
)
body = enc2utf8(toJSON(req))
api_key = "naXJ+dMXcVgBaedplSJrS2W6p2olaiz4jtesj7z7ZYS7oK5UD1JgT0EVf+YFFquWoakmWYmunryTJRX2YBVpbA==" # Replace this with the API key for the web service
authz_hdr = paste('Bearer', api_key, sep=' ')
h$reset()
curlPerform(url = "https://ussouthcentral.services.azureml.net/workspaces/cdc72d0430da45d2b885a1209cea40b6/services/4ffe0b4890b34eff8375a93f931aa123/execute?api-version=2.0&details=true",
httpheader=c('Content-Type' = "application/json", 'Authorization' = authz_hdr),
postfields=body,
writefunction = h$update,
headerfunction = hdr$update,
verbose = TRUE
)
headers = hdr$value()
httpStatus = headers["status"]
if (httpStatus >= 400)
{
print(paste("The request failed with status code:", httpStatus, sep=" "))
# Print the headers - they include the requert ID and the timestamp, which are useful for debugging the failure
print(headers)
}
print("Result:")
result = h$value()
finalResult <- fromJSON(result)
print(finalResult)
View(df)
connectionString <- "Driver={ODBC Driver 13 for SQL Server};Server=tcp:mhuffer.database.windows.net,1433;Database=NFL;Uid=mhuffer@mhuffer;Pwd={FRANKlin8992};Encrypt=yes;TrustServerCertificate=no;Connection Timeout=30;"
sqlQuery <- "SELECT DRIVE, QTR, DOWN, GAME_TIME, TIME_UNDER, TIME_SECS, PLAY_TIME_DIFF, SIDE_OF_FIELD, YARD_LINE, YARD_LINE_100, YARDS_TO_GO, YARDS_NET, GOAL_TO_GO, FIRST_DOWN, POS_TEAM, DEF_TEAM, YARDS_GAINED, PLAY_TYPE, PASSER_ID, PASS_ATTEMPT, PASS_LENGTH, AIR_YARDS, PASS_LOCATION, INTERCEPTION_THROWN, INTERCEPTOR, RUSHER_ID, RUSH_ATTEMPT, RUN_LOCATION, RUN_GAP, RECEIVER_ID, RECEPTION, BLOCKING_PLAYER, POS_TEAM_SCORE, DEF_TEAM_SCORE, SCORE_DIFF, ABS_SCORE_DIFF, HOME_TEAM, AWAY_TEAM, SEASON FROM dbo.play_by_play_2017"
conn <- odbcDriverConnect(connectionString)
df <- data.frame(sqlQuery(conn, sqlQuery))
#df$PLAYER_NAME <- sapply(df[, "PLAYER_NAME"], as.character)
close(conn)
createList <- function(df){
temp <- apply(df, 1, function(x) as.vector(paste(x, sep = "")))
colnames(temp) <- NULL
temp <- apply(temp, 2, function(x) as.list(x))
return(temp)
}
# Accept SSL certificates issued by public Certificate Authorities
options(RCurlOptions = list(cainfo = system.file("CurlSSL", "cacert.pem", package = "RCurl")))
h = basicTextGatherer()
hdr = basicHeaderGatherer()
req = list(
Inputs = list(
"input1" = list(
"ColumnNames" = list("DRIVE", "QTR", "DOWN", "GAME_TIME", "TIME_UNDER", "TIME_SECS", "PLAY_TIME_DIFF", "SIDE_OF_FIELD", "YARD_LINE", "YARD_LINE_100", "YARDS_TO_GO", "YARDS_NET", "GOAL_TO_GO", "FIRST_DOWN", "POS_TEAM", "DEF_TEAM", "YARDS_GAINED", "PLAY_TYPE", "PASSER_ID", "PASS_ATTEMPT", "PASS_LENGTH", "AIR_YARDS", "PASS_LOCATION", "INTERCEPTION_THROWN", "INTERCEPTOR", "RUSHER_ID", "RUSH_ATTEMPT", "RUN_LOCATION", "RUN_GAP", "RECEIVER_ID", "RECEPTION", "BLOCKING_PLAYER", "POS_TEAM_SCORE", "DEF_TEAM_SCORE", "SCORE_DIFF", "ABS_SCORE_DIFF", "HOME_TEAM", "AWAY_TEAM", "SEASON"),
"Values" = createList(df)
)                ),
GlobalParameters = setNames(fromJSON('{}'), character(0))
)
body = enc2utf8(toJSON(req))
api_key = "naXJ+dMXcVgBaedplSJrS2W6p2olaiz4jtesj7z7ZYS7oK5UD1JgT0EVf+YFFquWoakmWYmunryTJRX2YBVpbA==" # Replace this with the API key for the web service
authz_hdr = paste('Bearer', api_key, sep=' ')
h$reset()
curlPerform(url = "https://ussouthcentral.services.azureml.net/workspaces/cdc72d0430da45d2b885a1209cea40b6/services/4ffe0b4890b34eff8375a93f931aa123/execute?api-version=2.0&details=true",
httpheader=c('Content-Type' = "application/json", 'Authorization' = authz_hdr),
postfields=body,
writefunction = h$update,
headerfunction = hdr$update,
verbose = TRUE
)
headers = hdr$value()
httpStatus = headers["status"]
if (httpStatus >= 400)
{
print(paste("The request failed with status code:", httpStatus, sep=" "))
# Print the headers - they include the requert ID and the timestamp, which are useful for debugging the failure
print(headers)
}
print("Result:")
result = h$value()
finalResult <- fromJSON(result)
print(finalResult)
connectionString <- "Driver={ODBC Driver 13 for SQL Server};Server=tcp:mhuffer.database.windows.net,1433;Database=NFL;Uid=mhuffer@mhuffer;Pwd={FRANKlin8992};Encrypt=yes;TrustServerCertificate=no;Connection Timeout=30;"
sqlQuery <- "SELECT TOP 10 DRIVE, QTR, DOWN, GAME_TIME, TIME_UNDER, TIME_SECS, PLAY_TIME_DIFF, SIDE_OF_FIELD, YARD_LINE, YARD_LINE_100, YARDS_TO_GO, YARDS_NET, GOAL_TO_GO, FIRST_DOWN, POS_TEAM, DEF_TEAM, YARDS_GAINED, PLAY_TYPE, PASSER_ID, PASS_ATTEMPT, PASS_LENGTH, AIR_YARDS, PASS_LOCATION, INTERCEPTION_THROWN, INTERCEPTOR, RUSHER_ID, RUSH_ATTEMPT, RUN_LOCATION, RUN_GAP, RECEIVER_ID, RECEPTION, BLOCKING_PLAYER, POS_TEAM_SCORE, DEF_TEAM_SCORE, SCORE_DIFF, ABS_SCORE_DIFF, HOME_TEAM, AWAY_TEAM, SEASON FROM dbo.play_by_play_2017"
conn <- odbcDriverConnect(connectionString)
df <- data.frame(sqlQuery(conn, sqlQuery))
#df$PLAYER_NAME <- sapply(df[, "PLAYER_NAME"], as.character)
close(conn)
createList <- function(df){
temp <- apply(df, 1, function(x) as.vector(paste(x, sep = "")))
colnames(temp) <- NULL
temp <- apply(temp, 2, function(x) as.list(x))
return(temp)
}
# Accept SSL certificates issued by public Certificate Authorities
options(RCurlOptions = list(cainfo = system.file("CurlSSL", "cacert.pem", package = "RCurl")))
h = basicTextGatherer()
hdr = basicHeaderGatherer()
req = list(
Inputs = list(
"input1" = list(
"ColumnNames" = list("DRIVE", "QTR", "DOWN", "GAME_TIME", "TIME_UNDER", "TIME_SECS", "PLAY_TIME_DIFF", "SIDE_OF_FIELD", "YARD_LINE", "YARD_LINE_100", "YARDS_TO_GO", "YARDS_NET", "GOAL_TO_GO", "FIRST_DOWN", "POS_TEAM", "DEF_TEAM", "YARDS_GAINED", "PLAY_TYPE", "PASSER_ID", "PASS_ATTEMPT", "PASS_LENGTH", "AIR_YARDS", "PASS_LOCATION", "INTERCEPTION_THROWN", "INTERCEPTOR", "RUSHER_ID", "RUSH_ATTEMPT", "RUN_LOCATION", "RUN_GAP", "RECEIVER_ID", "RECEPTION", "BLOCKING_PLAYER", "POS_TEAM_SCORE", "DEF_TEAM_SCORE", "SCORE_DIFF", "ABS_SCORE_DIFF", "HOME_TEAM", "AWAY_TEAM", "SEASON"),
"Values" = createList(df)
)                ),
GlobalParameters = setNames(fromJSON('{}'), character(0))
)
body = enc2utf8(toJSON(req))
api_key = "naXJ+dMXcVgBaedplSJrS2W6p2olaiz4jtesj7z7ZYS7oK5UD1JgT0EVf+YFFquWoakmWYmunryTJRX2YBVpbA==" # Replace this with the API key for the web service
authz_hdr = paste('Bearer', api_key, sep=' ')
h$reset()
curlPerform(url = "https://ussouthcentral.services.azureml.net/workspaces/cdc72d0430da45d2b885a1209cea40b6/services/4ffe0b4890b34eff8375a93f931aa123/execute?api-version=2.0&details=true",
httpheader=c('Content-Type' = "application/json", 'Authorization' = authz_hdr),
postfields=body,
writefunction = h$update,
headerfunction = hdr$update,
verbose = TRUE
)
headers = hdr$value()
httpStatus = headers["status"]
if (httpStatus >= 400)
{
print(paste("The request failed with status code:", httpStatus, sep=" "))
# Print the headers - they include the requert ID and the timestamp, which are useful for debugging the failure
print(headers)
}
print("Result:")
result = h$value()
finalResult <- fromJSON(result)
print(finalResult)
connectionString <- "Driver={ODBC Driver 13 for SQL Server};Server=tcp:mhuffer.database.windows.net,1433;Database=NFL;Uid=mhuffer@mhuffer;Pwd={FRANKlin8992};Encrypt=yes;TrustServerCertificate=no;Connection Timeout=30;"
sqlQuery <- "SELECT TOP 10 DRIVE, QTR, DOWN, GAME_TIME, TIME_UNDER, TIME_SECS, PLAY_TIME_DIFF, SIDE_OF_FIELD, YARD_LINE, YARD_LINE_100, YARDS_TO_GO, YARDS_NET, GOAL_TO_GO, FIRST_DOWN, POS_TEAM, DEF_TEAM, YARDS_GAINED, PLAY_TYPE, PASSER_ID, PASS_ATTEMPT, PASS_LENGTH, AIR_YARDS, PASS_LOCATION, INTERCEPTION_THROWN, INTERCEPTOR, RUSHER_ID, RUSH_ATTEMPT, RUN_LOCATION, RUN_GAP, RECEIVER_ID, RECEPTION, BLOCKING_PLAYER, POS_TEAM_SCORE, DEF_TEAM_SCORE, SCORE_DIFF, ABS_SCORE_DIFF, HOME_TEAM, AWAY_TEAM, SEASON FROM dbo.play_by_play_2017"
conn <- odbcDriverConnect(connectionString)
df <- data.frame(sqlQuery(conn, sqlQuery))
#df$PLAYER_NAME <- sapply(df[, "PLAYER_NAME"], as.character)
close(conn)
createList <- function(df){
temp <- apply(df, 1, function(x) as.vector(paste(x, sep = "")))
colnames(temp) <- NULL
temp <- apply(temp, 2, function(x) as.list(x))
return(temp)
}
# Accept SSL certificates issued by public Certificate Authorities
options(RCurlOptions = list(cainfo = system.file("CurlSSL", "cacert.pem", package = "RCurl")))
h = basicTextGatherer()
hdr = basicHeaderGatherer()
req = list(
Inputs = list(
"input1" = list(
"ColumnNames" = list("DRIVE", "QTR", "DOWN", "GAME_TIME", "TIME_UNDER", "TIME_SECS", "PLAY_TIME_DIFF", "SIDE_OF_FIELD", "YARD_LINE", "YARD_LINE_100", "YARDS_TO_GO", "YARDS_NET", "GOAL_TO_GO", "FIRST_DOWN", "POS_TEAM", "DEF_TEAM", "YARDS_GAINED", "PLAY_TYPE", "PASSER_ID", "PASS_ATTEMPT", "PASS_LENGTH", "AIR_YARDS", "PASS_LOCATION", "INTERCEPTION_THROWN", "INTERCEPTOR", "RUSHER_ID", "RUSH_ATTEMPT", "RUN_LOCATION", "RUN_GAP", "RECEIVER_ID", "RECEPTION", "BLOCKING_PLAYER", "POS_TEAM_SCORE", "DEF_TEAM_SCORE", "SCORE_DIFF", "ABS_SCORE_DIFF", "HOME_TEAM", "AWAY_TEAM", "SEASON"),
"Values" = createList(df)
)                ),
GlobalParameters = setNames(fromJSON('{}'), character(0))
)
body = enc2utf8(toJSON(req))
api_key = "naXJ+dMXcVgBaedplSJrS2W6p2olaiz4jtesj7z7ZYS7oK5UD1JgT0EVf+YFFquWoakmWYmunryTJRX2YBVpbA==" # Replace this with the API key for the web service
authz_hdr = paste('Bearer', api_key, sep=' ')
h$reset()
curlPerform(url = "https://ussouthcentral.services.azureml.net/workspaces/cdc72d0430da45d2b885a1209cea40b6/services/4ffe0b4890b34eff8375a93f931aa123/execute?api-version=2.0&details=true",
httpheader=c('Content-Type' = "application/json", 'Authorization' = authz_hdr),
postfields=body,
writefunction = h$update,
headerfunction = hdr$update,
verbose = TRUE
)
headers = hdr$value()
httpStatus = headers["status"]
if (httpStatus >= 400)
{
print(paste("The request failed with status code:", httpStatus, sep=" "))
# Print the headers - they include the requert ID and the timestamp, which are useful for debugging the failure
print(headers)
}
print("Result:")
result = h$value()
finalResult <- fromJSON(result)
print(finalResult)
connectionString <- "Driver={ODBC Driver 13 for SQL Server};Server=tcp:mhuffer.database.windows.net,1433;Database=NFL;Uid=mhuffer@mhuffer;Pwd={FRANKlin8992};Encrypt=yes;TrustServerCertificate=no;Connection Timeout=30;"
sqlQuery <- "SELECT TOP 1000 DRIVE, QTR, DOWN, GAME_TIME, TIME_UNDER, TIME_SECS, PLAY_TIME_DIFF, SIDE_OF_FIELD, YARD_LINE, YARD_LINE_100, YARDS_TO_GO, YARDS_NET, GOAL_TO_GO, FIRST_DOWN, POS_TEAM, DEF_TEAM, YARDS_GAINED, PLAY_TYPE, PASSER_ID, PASS_ATTEMPT, PASS_LENGTH, AIR_YARDS, PASS_LOCATION, INTERCEPTION_THROWN, INTERCEPTOR, RUSHER_ID, RUSH_ATTEMPT, RUN_LOCATION, RUN_GAP, RECEIVER_ID, RECEPTION, BLOCKING_PLAYER, POS_TEAM_SCORE, DEF_TEAM_SCORE, SCORE_DIFF, ABS_SCORE_DIFF, HOME_TEAM, AWAY_TEAM, SEASON FROM dbo.play_by_play_2017"
conn <- odbcDriverConnect(connectionString)
df <- data.frame(sqlQuery(conn, sqlQuery))
#df$PLAYER_NAME <- sapply(df[, "PLAYER_NAME"], as.character)
close(conn)
createList <- function(df){
temp <- apply(df, 1, function(x) as.vector(paste(x, sep = "")))
colnames(temp) <- NULL
temp <- apply(temp, 2, function(x) as.list(x))
return(temp)
}
# Accept SSL certificates issued by public Certificate Authorities
options(RCurlOptions = list(cainfo = system.file("CurlSSL", "cacert.pem", package = "RCurl")))
h = basicTextGatherer()
hdr = basicHeaderGatherer()
req = list(
Inputs = list(
"input1" = list(
"ColumnNames" = list("DRIVE", "QTR", "DOWN", "GAME_TIME", "TIME_UNDER", "TIME_SECS", "PLAY_TIME_DIFF", "SIDE_OF_FIELD", "YARD_LINE", "YARD_LINE_100", "YARDS_TO_GO", "YARDS_NET", "GOAL_TO_GO", "FIRST_DOWN", "POS_TEAM", "DEF_TEAM", "YARDS_GAINED", "PLAY_TYPE", "PASSER_ID", "PASS_ATTEMPT", "PASS_LENGTH", "AIR_YARDS", "PASS_LOCATION", "INTERCEPTION_THROWN", "INTERCEPTOR", "RUSHER_ID", "RUSH_ATTEMPT", "RUN_LOCATION", "RUN_GAP", "RECEIVER_ID", "RECEPTION", "BLOCKING_PLAYER", "POS_TEAM_SCORE", "DEF_TEAM_SCORE", "SCORE_DIFF", "ABS_SCORE_DIFF", "HOME_TEAM", "AWAY_TEAM", "SEASON"),
"Values" = createList(df)
)                ),
GlobalParameters = setNames(fromJSON('{}'), character(0))
)
body = enc2utf8(toJSON(req))
api_key = "naXJ+dMXcVgBaedplSJrS2W6p2olaiz4jtesj7z7ZYS7oK5UD1JgT0EVf+YFFquWoakmWYmunryTJRX2YBVpbA==" # Replace this with the API key for the web service
authz_hdr = paste('Bearer', api_key, sep=' ')
h$reset()
curlPerform(url = "https://ussouthcentral.services.azureml.net/workspaces/cdc72d0430da45d2b885a1209cea40b6/services/4ffe0b4890b34eff8375a93f931aa123/execute?api-version=2.0&details=true",
httpheader=c('Content-Type' = "application/json", 'Authorization' = authz_hdr),
postfields=body,
writefunction = h$update,
headerfunction = hdr$update,
verbose = TRUE
)
headers = hdr$value()
httpStatus = headers["status"]
if (httpStatus >= 400)
{
print(paste("The request failed with status code:", httpStatus, sep=" "))
# Print the headers - they include the requert ID and the timestamp, which are useful for debugging the failure
print(headers)
}
print("Result:")
result = h$value()
finalResult <- fromJSON(result)
print(finalResult)
connectionString <- "Driver={ODBC Driver 13 for SQL Server};Server=tcp:mhuffer.database.windows.net,1433;Database=NFL;Uid=mhuffer@mhuffer;Pwd={FRANKlin8992};Encrypt=yes;TrustServerCertificate=no;Connection Timeout=30;"
sqlQuery <- "SELECT DRIVE, QTR, DOWN, GAME_TIME, TIME_UNDER, TIME_SECS, PLAY_TIME_DIFF, SIDE_OF_FIELD, YARD_LINE, YARD_LINE_100, YARDS_TO_GO, YARDS_NET, GOAL_TO_GO, FIRST_DOWN, POS_TEAM, DEF_TEAM, YARDS_GAINED, PLAY_TYPE, PASSER_ID, PASS_ATTEMPT, PASS_LENGTH, AIR_YARDS, PASS_LOCATION, INTERCEPTION_THROWN, INTERCEPTOR, RUSHER_ID, RUSH_ATTEMPT, RUN_LOCATION, RUN_GAP, RECEIVER_ID, RECEPTION, BLOCKING_PLAYER, POS_TEAM_SCORE, DEF_TEAM_SCORE, SCORE_DIFF, ABS_SCORE_DIFF, HOME_TEAM, AWAY_TEAM, SEASON FROM dbo.play_by_play_2017"
conn <- odbcDriverConnect(connectionString)
df <- data.frame(sqlQuery(conn, sqlQuery))
#df$PLAYER_NAME <- sapply(df[, "PLAYER_NAME"], as.character)
close(conn)
createList <- function(df){
temp <- apply(df, 1, function(x) as.vector(paste(x, sep = "")))
colnames(temp) <- NULL
temp <- apply(temp, 2, function(x) as.list(x))
return(temp)
}
# Accept SSL certificates issued by public Certificate Authorities
options(RCurlOptions = list(cainfo = system.file("CurlSSL", "cacert.pem", package = "RCurl")))
h = basicTextGatherer()
hdr = basicHeaderGatherer()
req = list(
Inputs = list(
"input1" = list(
"ColumnNames" = list("DRIVE", "QTR", "DOWN", "GAME_TIME", "TIME_UNDER", "TIME_SECS", "PLAY_TIME_DIFF", "SIDE_OF_FIELD", "YARD_LINE", "YARD_LINE_100", "YARDS_TO_GO", "YARDS_NET", "GOAL_TO_GO", "FIRST_DOWN", "POS_TEAM", "DEF_TEAM", "YARDS_GAINED", "PLAY_TYPE", "PASSER_ID", "PASS_ATTEMPT", "PASS_LENGTH", "AIR_YARDS", "PASS_LOCATION", "INTERCEPTION_THROWN", "INTERCEPTOR", "RUSHER_ID", "RUSH_ATTEMPT", "RUN_LOCATION", "RUN_GAP", "RECEIVER_ID", "RECEPTION", "BLOCKING_PLAYER", "POS_TEAM_SCORE", "DEF_TEAM_SCORE", "SCORE_DIFF", "ABS_SCORE_DIFF", "HOME_TEAM", "AWAY_TEAM", "SEASON"),
"Values" = createList(df)
)                ),
GlobalParameters = setNames(fromJSON('{}'), character(0))
)
body = enc2utf8(toJSON(req))
api_key = "naXJ+dMXcVgBaedplSJrS2W6p2olaiz4jtesj7z7ZYS7oK5UD1JgT0EVf+YFFquWoakmWYmunryTJRX2YBVpbA==" # Replace this with the API key for the web service
authz_hdr = paste('Bearer', api_key, sep=' ')
h$reset()
curlPerform(url = "https://ussouthcentral.services.azureml.net/workspaces/cdc72d0430da45d2b885a1209cea40b6/services/4ffe0b4890b34eff8375a93f931aa123/execute?api-version=2.0&details=true",
httpheader=c('Content-Type' = "application/json", 'Authorization' = authz_hdr),
postfields=body,
writefunction = h$update,
headerfunction = hdr$update,
verbose = TRUE
)
headers = hdr$value()
httpStatus = headers["status"]
if (httpStatus >= 400)
{
print(paste("The request failed with status code:", httpStatus, sep=" "))
# Print the headers - they include the requert ID and the timestamp, which are useful for debugging the failure
print(headers)
}
print("Result:")
result = h$value()
finalResult <- fromJSON(result)
print(finalResult)
connectionString <- "Driver={ODBC Driver 13 for SQL Server};Server=tcp:mhuffer.database.windows.net,1433;Database=NFL;Uid=mhuffer@mhuffer;Pwd={FRANKlin8992};Encrypt=yes;TrustServerCertificate=no;Connection Timeout=30;"
sqlQuery <- "SELECT TOP 10000 DRIVE, QTR, DOWN, GAME_TIME, TIME_UNDER, TIME_SECS, PLAY_TIME_DIFF, SIDE_OF_FIELD, YARD_LINE, YARD_LINE_100, YARDS_TO_GO, YARDS_NET, GOAL_TO_GO, FIRST_DOWN, POS_TEAM, DEF_TEAM, YARDS_GAINED, PLAY_TYPE, PASSER_ID, PASS_ATTEMPT, PASS_LENGTH, AIR_YARDS, PASS_LOCATION, INTERCEPTION_THROWN, INTERCEPTOR, RUSHER_ID, RUSH_ATTEMPT, RUN_LOCATION, RUN_GAP, RECEIVER_ID, RECEPTION, BLOCKING_PLAYER, POS_TEAM_SCORE, DEF_TEAM_SCORE, SCORE_DIFF, ABS_SCORE_DIFF, HOME_TEAM, AWAY_TEAM, SEASON FROM dbo.play_by_play_2017"
conn <- odbcDriverConnect(connectionString)
df <- data.frame(sqlQuery(conn, sqlQuery))
#df$PLAYER_NAME <- sapply(df[, "PLAYER_NAME"], as.character)
close(conn)
createList <- function(df){
temp <- apply(df, 1, function(x) as.vector(paste(x, sep = "")))
colnames(temp) <- NULL
temp <- apply(temp, 2, function(x) as.list(x))
return(temp)
}
# Accept SSL certificates issued by public Certificate Authorities
options(RCurlOptions = list(cainfo = system.file("CurlSSL", "cacert.pem", package = "RCurl")))
h = basicTextGatherer()
hdr = basicHeaderGatherer()
req = list(
Inputs = list(
"input1" = list(
"ColumnNames" = list("DRIVE", "QTR", "DOWN", "GAME_TIME", "TIME_UNDER", "TIME_SECS", "PLAY_TIME_DIFF", "SIDE_OF_FIELD", "YARD_LINE", "YARD_LINE_100", "YARDS_TO_GO", "YARDS_NET", "GOAL_TO_GO", "FIRST_DOWN", "POS_TEAM", "DEF_TEAM", "YARDS_GAINED", "PLAY_TYPE", "PASSER_ID", "PASS_ATTEMPT", "PASS_LENGTH", "AIR_YARDS", "PASS_LOCATION", "INTERCEPTION_THROWN", "INTERCEPTOR", "RUSHER_ID", "RUSH_ATTEMPT", "RUN_LOCATION", "RUN_GAP", "RECEIVER_ID", "RECEPTION", "BLOCKING_PLAYER", "POS_TEAM_SCORE", "DEF_TEAM_SCORE", "SCORE_DIFF", "ABS_SCORE_DIFF", "HOME_TEAM", "AWAY_TEAM", "SEASON"),
"Values" = createList(df)
)                ),
GlobalParameters = setNames(fromJSON('{}'), character(0))
)
body = enc2utf8(toJSON(req))
api_key = "naXJ+dMXcVgBaedplSJrS2W6p2olaiz4jtesj7z7ZYS7oK5UD1JgT0EVf+YFFquWoakmWYmunryTJRX2YBVpbA==" # Replace this with the API key for the web service
authz_hdr = paste('Bearer', api_key, sep=' ')
h$reset()
curlPerform(url = "https://ussouthcentral.services.azureml.net/workspaces/cdc72d0430da45d2b885a1209cea40b6/services/4ffe0b4890b34eff8375a93f931aa123/execute?api-version=2.0&details=true",
httpheader=c('Content-Type' = "application/json", 'Authorization' = authz_hdr),
postfields=body,
writefunction = h$update,
headerfunction = hdr$update,
verbose = TRUE
)
headers = hdr$value()
httpStatus = headers["status"]
if (httpStatus >= 400)
{
print(paste("The request failed with status code:", httpStatus, sep=" "))
# Print the headers - they include the requert ID and the timestamp, which are useful for debugging the failure
print(headers)
}
print("Result:")
result = h$value()
finalResult <- fromJSON(result)
print(finalResult)
connectionString <- "Driver={ODBC Driver 13 for SQL Server};Server=tcp:mhuffer.database.windows.net,1433;Database=NFL;Uid=mhuffer@mhuffer;Pwd={FRANKlin8992};Encrypt=yes;TrustServerCertificate=no;Connection Timeout=30;"
sqlQuery <- "SELECT TOP 5000 DRIVE, QTR, DOWN, GAME_TIME, TIME_UNDER, TIME_SECS, PLAY_TIME_DIFF, SIDE_OF_FIELD, YARD_LINE, YARD_LINE_100, YARDS_TO_GO, YARDS_NET, GOAL_TO_GO, FIRST_DOWN, POS_TEAM, DEF_TEAM, YARDS_GAINED, PLAY_TYPE, PASSER_ID, PASS_ATTEMPT, PASS_LENGTH, AIR_YARDS, PASS_LOCATION, INTERCEPTION_THROWN, INTERCEPTOR, RUSHER_ID, RUSH_ATTEMPT, RUN_LOCATION, RUN_GAP, RECEIVER_ID, RECEPTION, BLOCKING_PLAYER, POS_TEAM_SCORE, DEF_TEAM_SCORE, SCORE_DIFF, ABS_SCORE_DIFF, HOME_TEAM, AWAY_TEAM, SEASON FROM dbo.play_by_play_2017"
conn <- odbcDriverConnect(connectionString)
df <- data.frame(sqlQuery(conn, sqlQuery))
#df$PLAYER_NAME <- sapply(df[, "PLAYER_NAME"], as.character)
close(conn)
createList <- function(df){
temp <- apply(df, 1, function(x) as.vector(paste(x, sep = "")))
colnames(temp) <- NULL
temp <- apply(temp, 2, function(x) as.list(x))
return(temp)
}
# Accept SSL certificates issued by public Certificate Authorities
options(RCurlOptions = list(cainfo = system.file("CurlSSL", "cacert.pem", package = "RCurl")))
h = basicTextGatherer()
hdr = basicHeaderGatherer()
req = list(
Inputs = list(
"input1" = list(
"ColumnNames" = list("DRIVE", "QTR", "DOWN", "GAME_TIME", "TIME_UNDER", "TIME_SECS", "PLAY_TIME_DIFF", "SIDE_OF_FIELD", "YARD_LINE", "YARD_LINE_100", "YARDS_TO_GO", "YARDS_NET", "GOAL_TO_GO", "FIRST_DOWN", "POS_TEAM", "DEF_TEAM", "YARDS_GAINED", "PLAY_TYPE", "PASSER_ID", "PASS_ATTEMPT", "PASS_LENGTH", "AIR_YARDS", "PASS_LOCATION", "INTERCEPTION_THROWN", "INTERCEPTOR", "RUSHER_ID", "RUSH_ATTEMPT", "RUN_LOCATION", "RUN_GAP", "RECEIVER_ID", "RECEPTION", "BLOCKING_PLAYER", "POS_TEAM_SCORE", "DEF_TEAM_SCORE", "SCORE_DIFF", "ABS_SCORE_DIFF", "HOME_TEAM", "AWAY_TEAM", "SEASON"),
"Values" = createList(df)
)                ),
GlobalParameters = setNames(fromJSON('{}'), character(0))
)
body = enc2utf8(toJSON(req))
api_key = "naXJ+dMXcVgBaedplSJrS2W6p2olaiz4jtesj7z7ZYS7oK5UD1JgT0EVf+YFFquWoakmWYmunryTJRX2YBVpbA==" # Replace this with the API key for the web service
authz_hdr = paste('Bearer', api_key, sep=' ')
h$reset()
curlPerform(url = "https://ussouthcentral.services.azureml.net/workspaces/cdc72d0430da45d2b885a1209cea40b6/services/4ffe0b4890b34eff8375a93f931aa123/execute?api-version=2.0&details=true",
httpheader=c('Content-Type' = "application/json", 'Authorization' = authz_hdr),
postfields=body,
writefunction = h$update,
headerfunction = hdr$update,
verbose = TRUE
)
headers = hdr$value()
httpStatus = headers["status"]
if (httpStatus >= 400)
{
print(paste("The request failed with status code:", httpStatus, sep=" "))
# Print the headers - they include the requert ID and the timestamp, which are useful for debugging the failure
print(headers)
}
print("Result:")
result = h$value()
finalResult <- fromJSON(result)
print(finalResult)
connectionString <- "Driver={ODBC Driver 13 for SQL Server};Server=tcp:mhuffer.database.windows.net,1433;Database=NFL;Uid=mhuffer@mhuffer;Pwd={FRANKlin8992};Encrypt=yes;TrustServerCertificate=no;Connection Timeout=30;"
sqlQuery <- "SELECT TOP 1000 DRIVE, QTR, DOWN, GAME_TIME, TIME_UNDER, TIME_SECS, PLAY_TIME_DIFF, SIDE_OF_FIELD, YARD_LINE, YARD_LINE_100, YARDS_TO_GO, YARDS_NET, GOAL_TO_GO, FIRST_DOWN, POS_TEAM, DEF_TEAM, YARDS_GAINED, PLAY_TYPE, PASSER_ID, PASS_ATTEMPT, PASS_LENGTH, AIR_YARDS, PASS_LOCATION, INTERCEPTION_THROWN, INTERCEPTOR, RUSHER_ID, RUSH_ATTEMPT, RUN_LOCATION, RUN_GAP, RECEIVER_ID, RECEPTION, BLOCKING_PLAYER, POS_TEAM_SCORE, DEF_TEAM_SCORE, SCORE_DIFF, ABS_SCORE_DIFF, HOME_TEAM, AWAY_TEAM, SEASON FROM dbo.play_by_play_2017"
conn <- odbcDriverConnect(connectionString)
df <- data.frame(sqlQuery(conn, sqlQuery))
#df$PLAYER_NAME <- sapply(df[, "PLAYER_NAME"], as.character)
close(conn)
createList <- function(df){
temp <- apply(df, 1, function(x) as.vector(paste(x, sep = "")))
colnames(temp) <- NULL
temp <- apply(temp, 2, function(x) as.list(x))
return(temp)
}
# Accept SSL certificates issued by public Certificate Authorities
options(RCurlOptions = list(cainfo = system.file("CurlSSL", "cacert.pem", package = "RCurl")))
h = basicTextGatherer()
hdr = basicHeaderGatherer()
req = list(
Inputs = list(
"input1" = list(
"ColumnNames" = list("DRIVE", "QTR", "DOWN", "GAME_TIME", "TIME_UNDER", "TIME_SECS", "PLAY_TIME_DIFF", "SIDE_OF_FIELD", "YARD_LINE", "YARD_LINE_100", "YARDS_TO_GO", "YARDS_NET", "GOAL_TO_GO", "FIRST_DOWN", "POS_TEAM", "DEF_TEAM", "YARDS_GAINED", "PLAY_TYPE", "PASSER_ID", "PASS_ATTEMPT", "PASS_LENGTH", "AIR_YARDS", "PASS_LOCATION", "INTERCEPTION_THROWN", "INTERCEPTOR", "RUSHER_ID", "RUSH_ATTEMPT", "RUN_LOCATION", "RUN_GAP", "RECEIVER_ID", "RECEPTION", "BLOCKING_PLAYER", "POS_TEAM_SCORE", "DEF_TEAM_SCORE", "SCORE_DIFF", "ABS_SCORE_DIFF", "HOME_TEAM", "AWAY_TEAM", "SEASON"),
"Values" = createList(df)
)                ),
GlobalParameters = setNames(fromJSON('{}'), character(0))
)
body = enc2utf8(toJSON(req))
api_key = "naXJ+dMXcVgBaedplSJrS2W6p2olaiz4jtesj7z7ZYS7oK5UD1JgT0EVf+YFFquWoakmWYmunryTJRX2YBVpbA==" # Replace this with the API key for the web service
authz_hdr = paste('Bearer', api_key, sep=' ')
h$reset()
curlPerform(url = "https://ussouthcentral.services.azureml.net/workspaces/cdc72d0430da45d2b885a1209cea40b6/services/4ffe0b4890b34eff8375a93f931aa123/execute?api-version=2.0&details=true",
httpheader=c('Content-Type' = "application/json", 'Authorization' = authz_hdr),
postfields=body,
writefunction = h$update,
headerfunction = hdr$update,
verbose = TRUE
)
headers = hdr$value()
httpStatus = headers["status"]
if (httpStatus >= 400)
{
print(paste("The request failed with status code:", httpStatus, sep=" "))
# Print the headers - they include the requert ID and the timestamp, which are useful for debugging the failure
print(headers)
}
print("Result:")
result = h$value()
finalResult <- fromJSON(result)
print(finalResult)
connectionString <- "Driver={ODBC Driver 13 for SQL Server};Server=tcp:mhuffer.database.windows.net,1433;Database=NFL;Uid=mhuffer@mhuffer;Pwd={FRANKlin8992};Encrypt=yes;TrustServerCertificate=no;Connection Timeout=30;"
sqlQuery <- "SELECT TOP 1000 DRIVE, QTR, DOWN, GAME_TIME, TIME_UNDER, TIME_SECS, PLAY_TIME_DIFF, SIDE_OF_FIELD, YARD_LINE, YARD_LINE_100, YARDS_TO_GO, YARDS_NET, GOAL_TO_GO, FIRST_DOWN, POS_TEAM, DEF_TEAM, YARDS_GAINED, PLAY_TYPE, PASSER_ID, PASS_ATTEMPT, PASS_LENGTH, AIR_YARDS, PASS_LOCATION, INTERCEPTION_THROWN, INTERCEPTOR, RUSHER_ID, RUSH_ATTEMPT, RUN_LOCATION, RUN_GAP, RECEIVER_ID, RECEPTION, BLOCKING_PLAYER, POS_TEAM_SCORE, DEF_TEAM_SCORE, SCORE_DIFF, ABS_SCORE_DIFF, HOME_TEAM, AWAY_TEAM, SEASON FROM dbo.play_by_play_2017 WHERE PLAY_TYPE = 'Run' OR PLAY_TYPE = 'Pass'"
conn <- odbcDriverConnect(connectionString)
df <- data.frame(sqlQuery(conn, sqlQuery))
#df$PLAYER_NAME <- sapply(df[, "PLAYER_NAME"], as.character)
close(conn)
createList <- function(df){
temp <- apply(df, 1, function(x) as.vector(paste(x, sep = "")))
colnames(temp) <- NULL
temp <- apply(temp, 2, function(x) as.list(x))
return(temp)
}
# Accept SSL certificates issued by public Certificate Authorities
options(RCurlOptions = list(cainfo = system.file("CurlSSL", "cacert.pem", package = "RCurl")))
h = basicTextGatherer()
hdr = basicHeaderGatherer()
req = list(
Inputs = list(
"input1" = list(
"ColumnNames" = list("DRIVE", "QTR", "DOWN", "GAME_TIME", "TIME_UNDER", "TIME_SECS", "PLAY_TIME_DIFF", "SIDE_OF_FIELD", "YARD_LINE", "YARD_LINE_100", "YARDS_TO_GO", "YARDS_NET", "GOAL_TO_GO", "FIRST_DOWN", "POS_TEAM", "DEF_TEAM", "YARDS_GAINED", "PLAY_TYPE", "PASSER_ID", "PASS_ATTEMPT", "PASS_LENGTH", "AIR_YARDS", "PASS_LOCATION", "INTERCEPTION_THROWN", "INTERCEPTOR", "RUSHER_ID", "RUSH_ATTEMPT", "RUN_LOCATION", "RUN_GAP", "RECEIVER_ID", "RECEPTION", "BLOCKING_PLAYER", "POS_TEAM_SCORE", "DEF_TEAM_SCORE", "SCORE_DIFF", "ABS_SCORE_DIFF", "HOME_TEAM", "AWAY_TEAM", "SEASON"),
"Values" = createList(df)
)                ),
GlobalParameters = setNames(fromJSON('{}'), character(0))
)
body = enc2utf8(toJSON(req))
api_key = "naXJ+dMXcVgBaedplSJrS2W6p2olaiz4jtesj7z7ZYS7oK5UD1JgT0EVf+YFFquWoakmWYmunryTJRX2YBVpbA==" # Replace this with the API key for the web service
authz_hdr = paste('Bearer', api_key, sep=' ')
h$reset()
curlPerform(url = "https://ussouthcentral.services.azureml.net/workspaces/cdc72d0430da45d2b885a1209cea40b6/services/4ffe0b4890b34eff8375a93f931aa123/execute?api-version=2.0&details=true",
httpheader=c('Content-Type' = "application/json", 'Authorization' = authz_hdr),
postfields=body,
writefunction = h$update,
headerfunction = hdr$update,
verbose = TRUE
)
headers = hdr$value()
httpStatus = headers["status"]
if (httpStatus >= 400)
{
print(paste("The request failed with status code:", httpStatus, sep=" "))
# Print the headers - they include the requert ID and the timestamp, which are useful for debugging the failure
print(headers)
}
print("Result:")
result = h$value()
finalResult <- fromJSON(result)
print(finalResult)
connectionString <- "Driver={ODBC Driver 13 for SQL Server};Server=tcp:mhuffer.database.windows.net,1433;Database=NFL;Uid=mhuffer@mhuffer;Pwd={FRANKlin8992};Encrypt=yes;TrustServerCertificate=no;Connection Timeout=30;"
sqlQuery <- "SELECT TOP 1000 GAME_ID, PLAY_ID, DRIVE, QTR, DOWN, GAME_TIME, TIME_UNDER, TIME_SECS, PLAY_TIME_DIFF, SIDE_OF_FIELD, YARD_LINE, YARD_LINE_100, YARDS_TO_GO, YARDS_NET, GOAL_TO_GO, FIRST_DOWN, POS_TEAM, DEF_TEAM, YARDS_GAINED, PLAY_TYPE, PASSER_ID, PASS_ATTEMPT, PASS_LENGTH, AIR_YARDS, PASS_LOCATION, INTERCEPTION_THROWN, INTERCEPTOR, RUSHER_ID, RUSH_ATTEMPT, RUN_LOCATION, RUN_GAP, RECEIVER_ID, RECEPTION, BLOCKING_PLAYER, POS_TEAM_SCORE, DEF_TEAM_SCORE, SCORE_DIFF, ABS_SCORE_DIFF, HOME_TEAM, AWAY_TEAM, SEASON FROM dbo.play_by_play_2017 WHERE PLAY_TYPE = 'Run' OR PLAY_TYPE = 'Pass'"
conn <- odbcDriverConnect(connectionString)
df <- data.frame(sqlQuery(conn, sqlQuery))
#df$PLAYER_NAME <- sapply(df[, "PLAYER_NAME"], as.character)
close(conn)
createList <- function(df){
temp <- apply(df, 1, function(x) as.vector(paste(x, sep = "")))
colnames(temp) <- NULL
temp <- apply(temp, 2, function(x) as.list(x))
return(temp)
}
# Accept SSL certificates issued by public Certificate Authorities
options(RCurlOptions = list(cainfo = system.file("CurlSSL", "cacert.pem", package = "RCurl")))
h = basicTextGatherer()
hdr = basicHeaderGatherer()
req = list(
Inputs = list(
"input1" = list(
"ColumnNames" = list("GAME_ID", "PLAY_ID", "DRIVE", "QTR", "DOWN", "GAME_TIME", "TIME_UNDER", "TIME_SECS", "PLAY_TIME_DIFF", "SIDE_OF_FIELD", "YARD_LINE", "YARD_LINE_100", "YARDS_TO_GO", "YARDS_NET", "GOAL_TO_GO", "FIRST_DOWN", "POS_TEAM", "DEF_TEAM", "YARDS_GAINED", "PLAY_TYPE", "PASSER_ID", "PASS_ATTEMPT", "PASS_LENGTH", "AIR_YARDS", "PASS_LOCATION", "INTERCEPTION_THROWN", "INTERCEPTOR", "RUSHER_ID", "RUSH_ATTEMPT", "RUN_LOCATION", "RUN_GAP", "RECEIVER_ID", "RECEPTION", "BLOCKING_PLAYER", "POS_TEAM_SCORE", "DEF_TEAM_SCORE", "SCORE_DIFF", "ABS_SCORE_DIFF", "HOME_TEAM", "AWAY_TEAM", "SEASON"),
"Values" = createList(df)
)                ),
GlobalParameters = setNames(fromJSON('{}'), character(0))
)
body = enc2utf8(toJSON(req))
api_key = "naXJ+dMXcVgBaedplSJrS2W6p2olaiz4jtesj7z7ZYS7oK5UD1JgT0EVf+YFFquWoakmWYmunryTJRX2YBVpbA==" # Replace this with the API key for the web service
authz_hdr = paste('Bearer', api_key, sep=' ')
h$reset()
curlPerform(url = "https://ussouthcentral.services.azureml.net/workspaces/cdc72d0430da45d2b885a1209cea40b6/services/4ffe0b4890b34eff8375a93f931aa123/execute?api-version=2.0&details=true",
httpheader=c('Content-Type' = "application/json", 'Authorization' = authz_hdr),
postfields=body,
writefunction = h$update,
headerfunction = hdr$update,
verbose = TRUE
)
headers = hdr$value()
httpStatus = headers["status"]
if (httpStatus >= 400)
{
print(paste("The request failed with status code:", httpStatus, sep=" "))
# Print the headers - they include the requert ID and the timestamp, which are useful for debugging the failure
print(headers)
}
print("Result:")
result = h$value()
finalResult <- fromJSON(result)
print(finalResult)
connectionString <- "Driver={ODBC Driver 13 for SQL Server};Server=tcp:mhuffer.database.windows.net,1433;Database=NFL;Uid=mhuffer@mhuffer;Pwd={FRANKlin8992};Encrypt=yes;TrustServerCertificate=no;Connection Timeout=30;"
sqlQuery <- "SELECT TOP 1000 GAME_ID, PLAY_ID, DRIVE, QTR, DOWN, GAME_TIME, TIME_UNDER, TIME_SECS, PLAY_TIME_DIFF, SIDE_OF_FIELD, YARD_LINE, YARD_LINE_100, YARDS_TO_GO, YARDS_NET, GOAL_TO_GO, FIRST_DOWN, POS_TEAM, DEF_TEAM, YARDS_GAINED, TOUCHDOWN, PLAY_TYPE, PASSER_ID, PASS_ATTEMPT, PASS_LENGTH, AIR_YARDS, PASS_LOCATION, INTERCEPTION_THROWN, INTERCEPTOR, RUSHER_ID, RUSH_ATTEMPT, RUN_LOCATION, RUN_GAP, RECEIVER_ID, RECEPTION, BLOCKING_PLAYER, POS_TEAM_SCORE, DEF_TEAM_SCORE, SCORE_DIFF, ABS_SCORE_DIFF, HOME_TEAM, AWAY_TEAM, SEASON FROM dbo.play_by_play_2017 WHERE PLAY_TYPE = 'Run' OR PLAY_TYPE = 'Pass'"
conn <- odbcDriverConnect(connectionString)
complete_df <- data.frame(sqlQuery(conn, sqlQuery))
df <- copmlete_df[,-20]
df <- complete_df[,-20]
getwd()
setwd("C:/Users/mhuffer/Documents/GitHub/ML-server")
install.packages("RevoScaleR")
install.packages("installr")
library(installr)
install.packages("RevoScaleR")
